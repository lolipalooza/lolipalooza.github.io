---
thread: "Notas sobre RESTful API"
id_msg: 908540
date: "2019-07-22 15:48:20"

subject: "Re:Notas sobre RESTful API"
user: "yap320sorgesoureDug"



icon: xx




---
Dejo otro tutorial sobre REST:<br /><a href="https://tupaginaonline.net/crear-rest-api-con-php-y-mysql-en-un-hosting-compartido" class="bbc_link new_win" target="_blank">https://tupaginaonline.net/crear-rest-api-con-php-y-mysql-en-un-hosting-compartido</a><br /><br />Transcribo (porque no me fío de que esta página permanesca online para siempre, jeje notese la ironía: &quot;tupaginaonline.net&quot; dejando de estar online):<br /><br /><br /><br /><br /><div align="center"><span style="font-family: Impact;" class="bbc_font"><span style="font-size: 24pt;" class="bbc_size"><strong><em>Crear REST API con PHP y MySql en un Hosting compartido</em></strong></span></span></div><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><br /><strong>Paso a paso </strong>¿Cómo crear una REST API en PHP y MySQL para ser consumida por cualquier aplicación?<br /><br />Existe un gran numero de frameworks disponibles para poder crear un REST API. Para este artículo se escogió <strong>Slim</strong>.&nbsp; es un micro framework que te permite escribir aplicaciones web y API´s de forma rápida y eficiente. <br /><br />En este post, crearemos la&nbsp; REST API en un hosting (compartido) paso a paso utilizando&nbsp; MySQL y&nbsp; PHP,&nbsp; Veremos el servicio REST con ejemplos de todos los métodos disponibles como lo son: POST, GET, PUT y DELETE. La respuesta que nos devolverá el REST API será en formato JSON.<br /><br />Para los que no saben que es <strong><em>JSON </em></strong>(acrónimo de JavaScript Object Notation),&nbsp; básicamente es un formato de intercambio de datos bastante ligero que puede ser usado por la mayoría de los lenguajes para comunicarse entre si.<br /><br />Métodos (verbos)&nbsp; del servidor (HTTP):<br /></span></span><br /><br /><ul class="bbc_list"><li><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">GET: se utiliza para retornar y buscar información en la base de datos.</span></span></li><li><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">POST: se utiliza para insertar información a la base de datos.</span></span></li><li><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">PUT: se utiliza para actualizar información en la base de datos.</span></span></li><li><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">DELETE: se utiliza para eliminar información de la base de datos.</span></span></li></ul><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">Nuestra API REST tendrá el siguiente funcionamiento:</span></span><br /><br /><table class="bbc_table"><tr><td>Ruta</td><td>Método</td><td>Tipo</td><td>Descripción</td></tr><tr><td><strong>api</strong>/games/v1</td><td>GET</td><td>JSON</td><td>Lista todos los juegos</td></tr><tr><td><strong>api</strong>/games/v1/{id}</td><td>GET</td><td>JSON</td><td>Lista un juego en particular</td></tr><tr><td><strong>api</strong>/games/v1/add</td><td>POST</td><td>JSON</td><td>Agrega un juego</td></tr><tr><td><strong>api</strong>/games/v1/{id}</td><td>PUT</td><td>JSON</td><td>Actualiza un juego</td></tr><tr><td><strong>api</strong>/games/v1/{id}</td><td>DELETE</td><td>JSON</td><td>Elimina un juego</td></tr></table><br /><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">Como vez algunas de las rutas son las mismas,&nbsp; es una de las grandes ventajas al trabajar con REST APi<br /><br />De hecho si ingresas a cada ruta obtendremos el resultado de esa petición por ejemplo: <a href="https://tupaginaonline.net/api/games/v1" class="bbc_link new_win" target="_blank">https://tupaginaonline.net/api/games/v1</a><br /><br />obtendremos el siguiente resultado <strong>(json):</strong><br /></span></span><br /><br /><span style="font-family: courier;" class="bbc_font">[{&quot;id&quot;:&quot;1&quot;,&quot;nombre&quot;:&quot;Fallout 4&quot;,&quot;plataforma&quot;:&quot;Multi&quot;,&quot;ano&quot;:&quot;2014&quot;,&quot;genero&quot;:&quot;Rol&quot;,&quot;created_ad&quot;:&quot;2019-06-04 09:47:40&quot;},{&quot;id&quot;:&quot;2&quot;,&quot;nombre&quot;:&quot;The Witcher 3: Wild Hunt&quot;,&quot;plataforma&quot;:&quot;Multi&quot;,&quot;ano&quot;:&quot;2013&quot;,&quot;genero&quot;:&quot;Aventuras&quot;,&quot;created_ad&quot;:&quot;2019-06-04 09:48:07&quot;},{&quot;id&quot;:&quot;3&quot;,&quot;nombre&quot;:&quot;Resident evil 7&quot;,&quot;plataforma&quot;:&quot;Multi&quot;,&quot;ano&quot;:&quot;2017&quot;,&quot;genero&quot;:&quot;Terror&quot;,&quot;created_ad&quot;:&quot;2019-06-04 15:47:38&quot;},{&quot;id&quot;:&quot;6&quot;,&quot;nombre&quot;:&quot;The Legend of Zelda : The wind waker&quot;,&quot;plataforma&quot;:&quot;Nintendo&quot;,&quot;ano&quot;:&quot;2002&quot;,&quot;genero&quot;:&quot;Aventuras&quot;,&quot;created_ad&quot;:&quot;2019-06-04 16:42:46&quot;}]</span><br /><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><span style="color: red;" class="bbc_color"><strong>Vamos a empezar:</strong></span><br /><br />Sigue los pasos al pie de la letra para que tu REST API funcione correctamente.<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>1) Paso :</strong></span><br /><br />Crea una carpeta llamada <strong>api</strong> dentro de tu hosting: ejemplo : <em>public_html/mi_rest_api/<strong>api</strong></em><br /><br />una vez creada la carpeta api dirígete hacia la opción: <em><strong>Avanzada &gt; Terminal</strong></em><br /><br /><img src="https://i.imgur.com/WhDoeqD.jpg" alt="" class="bbc_img" /><br /><br />Una vez dentro del terminal procede a dirigirte hacia la carpeta creada, escribe <strong><em>dentro de la terminal</em></strong> el comando<br /><br /><span style="font-family: courier;" class="bbc_font"><span style="color: teal;" class="bbc_color">&gt;&nbsp; <strong>cd</strong> public_html/mi_rest_api/<strong>api</strong></span></span><br /><br />introduce el siguiente comando para verificar que tienes instalado <strong>composer</strong>: <em>Composer es una herramienta para la gestión de dependencias en PHP. Le permite declarar las bibliotecas de las que depende su proyecto y las administrará (instalará / actualizará) por usted.</em><br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">composer -v</code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">asumiendo que ya lo tienes instalado procedemos, si no ponte en contacto con tu proveedor de hosting.<br /><br />una vez ya dentro de la carpeta api, vas a introducir el siguiente comando:<br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">composer require slim/slim &quot;^3.12&quot;</code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">Para conocer que todo ha ido bien revisar en nuestro directorio si existe la carpeta <strong>vendor, abrir</strong> el archivo <strong>composer.json </strong>con tu editor de código preferido, el contenido de composer.json debería ser el siguiente:<br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">{<br /><br />&quot;require&quot;:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { &quot;slim/slim&quot;: &quot;^3.12&quot;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /><br />}</code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><span style="font-size: 14pt;" class="bbc_size"><strong>2) Paso : </strong></span><br /><br />Procedemos a crear la base de datos.<br /><br />creamos una tabla con las siguientes características :<br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">CREATE TABLE `games` (<br />`id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,<br />`nombre` varchar(150) NOT NULL,<br />`plataforma` varchar(50) NOT NULL,<br />`ano` int(11) NOT NULL,<br />`genero` varchar(40) NOT NULL,<br />`created_ad` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP )&nbsp; </code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><span style="font-size: 14pt;" class="bbc_size"><strong>3) Paso : </strong></span><br /><br />Crear archivo <strong>.htaccess</strong> dentro de la carpeta <strong>api</strong>&nbsp; con el siguiente contenido:<br /><br /></span></span><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">RewriteEngine On<br />RewriteCond %{REQUEST_FILENAME} !-f<br />RewriteCond %{REQUEST_FILENAME} !-d<br />RewriteRule ^ index.php [QSA,L]</code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><span style="font-size: 14pt;" class="bbc_size"><strong>4) Paso : </strong></span><br /><br />creamos el archivo de conexión a la base de datos llamado <strong>bd.php</strong><br /><br />con el siguiente contenido:<br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&lt; ?php function getConnection() {<br />$dbhost=&quot;localhost&quot;;<br />$dbuser=&quot;user&quot;;<br />$dbpass=&quot;&quot;;<br />$dbname=&quot;bd_name&quot;;<br />$dbh = new PDO(&quot;mysql:host=$dbhost;dbname=$dbname&quot;, $dbuser, $dbpass);<br />$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); return $dbh; }<br />?&gt;</code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><span style="font-size: 14pt;" class="bbc_size"><strong>5) Paso : </strong></span><br /><br />Crearemos el <strong>.index</strong> con el siguiente contenido:<br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&lt; ?php<br />require &quot;bd.php&quot;;<br />require &quot;functions.php&quot;;<br />use PsrHttpMessageServerRequestInterface as Request;<br />use PsrHttpMessageResponseInterface as Response;<br />require ´vendor/autoload.php´;<br /><br />$app = new SlimApp();<br /><br />//AQUI SE CREAN LAS RUTAS DE NUESTRA REST API<br />$app-&gt;get(´/games/v1´, ´all_Games´); //Obtener todos los juegos<br />$app-&gt;get(´/games/v1/{id}´, ´select_Game´); // Obtener un juego<br />$app-&gt;post(´/games/v1/add´, ´add_Game´); //Agregar un juego<br />$app-&gt;put(´/games/v1/{id}´, ´update_Game´); //Actualizar un juego<br />$app-&gt;delete(´/games/v1/{id}´, ´delete_Game´); //Eliminar un juego<br />$app-&gt;run();<br />?&gt;</code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size"><span style="font-size: 14pt;" class="bbc_size"><strong>6) Paso : </strong></span><br /><br />Crear el archivo llamado&nbsp; <strong>functions.php</strong> con el siguiente contenido:<br /></span></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code"> &lt; ?php<br />function all_Games($response) {<br />$sql = &quot;SELECT * FROM games&quot;;<br />try {<br />$stmt = getConnection()-&gt;query($sql);<br />$games = $stmt-&gt;fetchAll(PDO::FETCH_OBJ);<br />$db = null;<br />return json_encode($games);<br />} catch(PDOException $e) {<br />echo ´{&quot;error&quot;:{&quot;text&quot;:´. $e-&gt;getMessage() .´}}´;<br />}<br />}<br />function select_Game($request) {<br />$id = $request-&gt;getAttribute(´id´);<br />$sql = &quot;SELECT * FROM games where id=:id&quot;;<br />try {<br />$db = getConnection();<br />$stmt = $db-&gt;prepare($sql);<br />$stmt-&gt;bindParam(&quot;id&quot;, filter_var($id, FILTER_SANITIZE_STRING));<br />$stmt-&gt;execute();<br /><br />$games = $stmt-&gt;fetchAll(PDO::FETCH_OBJ);<br />$db = null;<br />return json_encode($games);<br />} catch(PDOException $e) {<br />echo ´{&quot;error&quot;:{&quot;text&quot;:´. $e-&gt;getMessage() .´}}´;<br />}<br />}<br /><br />function add_Game($request) {<br />$emp = $request-&gt;getParsedBody();<br />$sql = &quot;INSERT INTO games (nombre, plataforma, ano, genero) VALUES (:nombre, :plataforma, :ano, :genero)&quot;;<br />try {<br />$db = getConnection();<br />$stmt = $db-&gt;prepare($sql);<br />$stmt-&gt;bindParam(&quot;nombre&quot;, filter_var($emp[&quot;nombre&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;plataforma&quot;, filter_var($emp[&quot;plataforma&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;ano&quot;, filter_var($emp[&quot;ano&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;genero&quot;, filter_var($emp[&quot;genero&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;execute();<br />$emp[&quot;id&quot;] = $db-&gt;lastInsertId();<br />$db = null;<br />echo json_encode($emp);<br />} catch(PDOException $e) {<br />echo ´{&quot;error&quot;:{&quot;text&quot;:´. $e-&gt;getMessage() .´}}´;<br />}<br />}<br /><br />function update_Game($request) {<br />$emp = $request-&gt;getParsedBody();<br />$id = filter_var($request-&gt;getAttribute(´id´), FILTER_SANITIZE_STRING);<br />$sql = &quot;UPDATE games SET nombre=:nombre, plataforma=:plataforma, ano=:ano, genero=:genero WHERE id=:id&quot;;<br />try {<br />$db = getConnection();<br />$stmt = $db-&gt;prepare($sql);<br />$stmt-&gt;bindParam(&quot;nombre&quot;, filter_var($emp[&quot;nombre&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;plataforma&quot;, filter_var($emp[&quot;plataforma&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;ano&quot;, filter_var($emp[&quot;ano&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;genero&quot;, filter_var($emp[&quot;genero&quot;], FILTER_SANITIZE_STRING));<br />$stmt-&gt;bindParam(&quot;id&quot;, filter_var($id, FILTER_SANITIZE_STRING));<br />$stmt-&gt;execute();<br />$db = null;<br />echo json_encode($emp);<br />} catch(PDOException $e) {<br />echo ´{&quot;error&quot;:{&quot;text&quot;:´. $e-&gt;getMessage() .´}}´;<br />}<br />}<br /><br />function delete_Game($request) {<br />$id = filter_var($request-&gt;getAttribute(´id´), FILTER_SANITIZE_STRING);<br />$sql = &quot;DELETE FROM games WHERE id=:id&quot;;<br />try {<br />$db = getConnection();<br />$stmt = $db-&gt;prepare($sql);<br />$stmt-&gt;bindParam(&quot;id&quot;, $id);<br />$stmt-&gt;execute();<br />$db = null;<br />echo ´{&quot;error&quot;:{&quot;text&quot;:&quot;se elimino el juego&quot;}}´;<br />} catch(PDOException $e) {<br />echo ´{&quot;error&quot;:{&quot;text&quot;:´. $e-&gt;getMessage() .´}}´;<br />}<br />}<br />?&gt; </code><br /><span style="font-family: Arial;" class="bbc_font"><span style="font-size: 11pt;" class="bbc_size">El siguiente paso es <strong>probar</strong> tus rutas, lo puedes hacer con <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=es" class="bbc_link new_win" target="_blank">POSTMAN</a> <strong>(</strong><span style="font-size: 9pt;" class="bbc_size"><em>Herramienta para hacer peticiones a APIs que nos permiten probar nuestra API de manera sencilla</em></span><strong>)</strong><br /></span></span><br /><br /><div align="center"><span style="font-family: times new roman;" class="bbc_font"><span style="font-size: 14pt;" class="bbc_size"><em>Con eso ya estamos listos,&nbsp; si has seguido los pasos seguro habrás creado tu REST API de manera satisfactoria</em></span></span></div>
