---
thread: "Notas de Git"
id_msg: 910356
date: "2022-11-07 15:59:52"

subject: "Notas de Git"
user: "syn437sorgesoureDug"



icon: xx




---
<span style="font-family: impact;" class="bbc_font"><span style="font-size: 20pt;" class="bbc_size"><span style="color: #AAADA2;" class="bbc_color">No</span><span style="color: #284B63;" class="bbc_color">tas </span><span style="color: #BBBFB1;" class="bbc_color">de </span><span style="color: #9C9E99;" class="bbc_color">Git</span></span></span><br /><br />Los siguientes apuntes fueron tomados de este video:<br /><a href="https://www.youtube.com/watch?v=VdGzPZ31ts8" class="bbc_link new_win" target="_blank">https://www.youtube.com/watch?v=VdGzPZ31ts8</a><br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Configuración general</strong></span><br /><br />Revisar la versión<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git --version</code><br />Establecer nombre de usuario y correo:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git config --global user.name &quot;Tu Nombre de Usuario&quot;<br />git config --global user.email tu@email.com</code><br />Permite establecer el VSCode como el editor predeterminado, creo:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git config --global core.editor &quot;code --wait&quot;</code>Luego, con el comando <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">code .</span></span>, puedes abrir en VSCode la carpeta del directorio en donde te encuentres en la terminal. Qué trucazo, ¿no?<br /><br />Revisar la configuración:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git config --global -e</code><br />Configuración especial de caracter CR+LF:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git config --global core.autocrlf [true|input]</code>Si estás en Windows, debes poner &quot;true&quot;, si estás en Linux/Mac, debes poner &quot;input&quot;.<br />Ver video puesto al inicio para saber más, ir a la sección &quot;<em>Configuración de GIT</em>&quot;.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git config -h</code>Comando para ver toda la ayuda para el comando &quot;git config&quot;<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Inicializando repositorio</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git init</code>Crea la carpeta oculta .git dentro del proyecto, donde se almacenará toda la información de los cambios que se vayan haciendo.<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Flujo de trabajo</strong></span><br /><br />En git hay 4 etapas:<br />- La primera,<br />&nbsp; &nbsp; &nbsp;cuando estás creando los cambios sobre el archivo.<br />- Stage<br />&nbsp; &nbsp; &nbsp;con el comando <span style="font-family: courier;" class="bbc_font"><span style="color: teal;" class="bbc_color">git add</span></span> colocas el archivo en la etapa stage<br />- Commit<br />&nbsp; &nbsp; &nbsp;con el comando <span style="font-family: courier;" class="bbc_font"><span style="color: teal;" class="bbc_color">git commit</span></span> reportas que se hizo el cambio sobre el archivo<br />- Server<br />&nbsp; &nbsp; &nbsp;con el comando <span style="font-family: courier;" class="bbc_font"><span style="color: teal;" class="bbc_color">git push</span></span> subes los cambios al servidor<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Agregando cambios a Stage</strong></span><br /><br />Para detectar cambios en <em>Stage</em>, utilizamos el comando<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git status</code><br />Para agregarlos, se usa en comando <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git add &lt;nombre del archivo&gt;</span></span> ó<br /><span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git add archivo1 archivo2 archivo3</span></span> (varios archivos separados por espacios) ó<br /><span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git add *.txt</span></span> ó<br /><span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git add .</span></span> (en este último caso, es una mala práctica)<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Commit en git</strong></span><br /><br />Para comprometer (commit) todos los cambios agregados a Stage:<br /><span style="font-family: courier;" class="bbc_font"><span style="color: teal;" class="bbc_color">git commit -m &quot;&lt;comentario&gt;&quot;</span></span><br />En comentario se debe agregar una breve descripción del cambio.<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Descartar cambios</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git restore --staged archivo1<br />git restore archivo1</code>Con la bandera --staged sólo se retira lo agregado en <em>Stage</em>, pero el archivo permanece borrado.<br />Sin dicha bandera, se recupera el archivo borrado.<br /><br /><span style="color: red;" class="bbc_color"><strong>Importante:</strong></span><br />Si hiciste cambios sobre un archivo, con la bandera --staged sólo retiras los cambios de Stage, pero dichos cambios permanecerán en el archivo. Si quitas la bandera --staged, limpiarás todo cambio que hayas hecho de un archivo. OJO: esto es muy importante porque no se me ocurre un escenario en el que realmente quieras quitar cambios hechos sobre un archivo, ¡¡¡asi que hacer ésto podría resultar contraproducente en el 99.999% de los casos!!! ¡Pilas aquí!<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Renombrando archivos</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">mv archivo1.txt archivo.txt<br />git add archivo1.txt archivo.txt</code>Con el comando <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">mv</span></span>, estás renombrando el archivo (teóricamente el comando sirve para mover el archivo de una ubicación a otra, donde el primer argumento es la ubicación origen, y el segundo argumento es la ubicación de destino).<br />Con el comando <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git add</span></span> debes agregar todos los cambios introducidos, en donde &quot;archivo1.txt&quot; es el archivo que ha desaparecido y &quot;archivo.txt&quot; es el nuevo archivo encontrado.<br /><br />El siguiente comando realiza las 2 operaciones previas simultáneamente:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git mv archivo1.txt archivo.txt</code><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Un <em>git status</em> mejorado</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git status -s</code>La bandera -s permite visualizar de manera más compacta el estado de los archivos modificados.<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Visualizando cambios</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git diff<br />git diff --staged</code>Cuando haz hecho cambios en uno o más archivos (que aún no haz llevado a fase <em>stage</em>), <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git diff</span></span> te permite visualizar dichos cambios en la terminal (similar a como podías hacerlo con el github desktop).<br /><br />Si le agregas la bandera <span style="font-family: courier;" class="bbc_font"><span style="color: purple;" class="bbc_color">--staged</span></span> a <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">git diff</span></span>, puedes ver los cambios sobre los archivos que se encuentren en la fase <em>Stage</em>.<br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong>Viendo el historial</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">git log<br />git log --oneline</code>Con este comando puedes ver el historial de cambios sobre el proyecto. Con la bandera <span style="font-family: courier;" class="bbc_font"><span style="color: purple;" class="bbc_color">--oneline</span></span> lo puedes ver de manera compacta.
