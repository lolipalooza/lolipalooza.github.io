---
thread: "SCM para Principiantes!"
id_msg: 629498
date: "2017-10-27 21:37:28"

subject: "Re:SCM para Principiantes!"
user: "Mumifag Lalolanda"



icon: xx




---
<strong><span style="color: red;" class="bbc_color"><span style="font-size: 18pt;" class="bbc_size">Coding Structures</span></span></strong><br /><br /><span style="color: red;" class="bbc_color"><strong>Threads</strong></span><br />The main.scm file is processed by multiple threads.This might be one of the most difficult concepts to grasp for someone not familiar with multi-threading programming. So don&#039;t despair if you don&#039;t get it right away, you&#039;re not alone.<br /><br />Up till now, we described the code as being executed opcode after opcode, sometimes jumping to a different location and continuing. Imagine this process being executed by a little guy inside your computer. He spends all day reading an opcode, executing it, determining the next opcode to execute, read it and execute it, day-in day-out. Lets call this little guy &quot;thread&quot;.<br /><br />Now image that this guys has a brother, who does exactly the same thing. Off course they&#039;re not looking at the same opcodes at the same time, his brother is working on another part of the code. Both are working independently of each other, reading opcodes, executing them, determining next opcode, ... Can you image that ??<br /><br />Now image that there&#039;s a whole family of those little guys, all doing the same thing on different parts of the code.<br /><br />~~~~~Welcome to the world of multi-threading. ~~~~<br /><br /><span style="color: red;" class="bbc_color">Now how do we manage these threads ?</span><br />At the beginning there&#039;s only one thread that starts to execute at the beginning of the main.scm file, called the main-thread. Through a serie of jump&#039;s it will skip the first three sections and arrive at the beginning of the code-section. There it will perform some initialisation, until it encounters a series of &quot;create_thread&quot; opcodes.<br /><br />That opcode creates a new &quot;little guy&quot; (thread) that starts executing opcodes below the given label. In this way, the main-thread creates a whole army of threads, each working on a specific part of the code, to perform a dedicated task. Some of the threads live indefinitely, just looping around the same code. Other threads only have to perform a single task once and kill them self upon encountering an &quot;end_thread&quot; opcode.<br /><br />A thread can also kill another thread, by supplying name of its victim as a parameter to the end_thread opcode. Threads are given a name, when they execute a &quot;name_thread&quot; opcode, which is normally one of the first opcodes they encounter.<br /><br />Create_thread may be executed from both the MAIN part as well as the MISSIONS part. The code that the thread will execute however, must be located in the MAIN part.<br /><br />Missions are also executed as threads, but they are started with &quot;start mission&quot;. This will create a special kind of thread oif which only one can exist at the same time. Furthermore, during this thread the engine continually checks whether the player is busted or wasted. In that case the &quot;little guy&quot; is instructed to perform a &quot;return&quot; opcode, which causes him to jump back to the last &quot;gosub&quot;. This is why missions should have a special structure, in which this will lead to a failed mission. This structure will be described in one of the tutorials to come.<br /><br /><span style="color: red;" class="bbc_color"><strong>Labels/jump/gosub</strong></span><br />Labels are marked with a &quot;:&quot;. These are names that are assigned to some locations in the code. It is used jump to a location in your code. You can do this with &quot;gosub&quot; and &quot;jump&quot;.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">:MAIN_4059<br />01B7: release_weather<br />jump @MAIN_4075</code><br />You can see a label, named &quot;MAIN_4059&quot;. Then you can see a command, with a code (01B7) called opcode. In the third line you can see another command: &quot;jump&quot;. With the &quot;@...&quot; after that you indicate where the code has to jump to. So you are jumping to &quot;:MAIN_4075&quot;.<br /><br />Gosub works different, it also jumps to another label, but it goes back to the location just after the &quot;gosub&quot; when he reaches a &quot;return&quot;-command. For example:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">:MS_GAME_BEEFYBARON<br />$ONMISSION = 1 // integer values<br />00BA: text_styled &#039;BEEFY&#039; 1000 ms 2&nbsp; // Beefy Baron<br />gosub @SUB_FADE_500MS<br />start_mission 10&nbsp; // Beefy Baron<br />jump @END_CASE_VIDEO_GAME</code><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">:SUB_FADE_500MS<br />0169: set_fade_color 0 0 0<br />fade 0 500<br /><br />:LITCAS_282<br />if<br />fading<br />else_jump @LITCAS_306<br />wait 0<br />jump @LITCAS_282<br /><br />:LITCAS_306<br />Return</code><br />So it jumps with a &quot;gosub&quot; to &quot;:SUB_FADE_500MS&quot;. When it reaches the &quot;return&quot; command (under &quot;:LITCAS_306&quot;), it goes back to the gosub. After the return, the code will continue with &quot;start_mission 10&quot;).<br /><br />Gosub is used when you want to use a piece of code from multiple places in your code.<br /><br /><span style="color: red;" class="bbc_color"><strong>Conditional jump</strong></span><br />When you use a &quot;Conditional jump&quot;, the code will do or not do the jump depending on some condition. You can use three notations for this, which all have the same result:<br />else_jump @boe<br />jf @boe<br />004D: jump_if_false @boe<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">:SWEET4_103<br />if<br />&nbsp; Model.Available(#GREENWOO)<br />else_jump @SWEET4_152</code><br />In this example we check if the model is available (the model of the Greenwood, in this case). When this isn&#039;t true, it jumps to label &quot;:SWEET4_152&quot;. When this is true, the code goes further.<br /><br />With the conditional jump, you can make a loop. Then the code waits until the condition is true. Be Aware! You have to put a wait in every loop! When you forget it, the game will crash, and, when you don&#039;t run SA in a window, you even can&#039;t go back to your desktop. The only solution is to restart your PC. So, my advise is to run SA in a window when testing your new code! An example of a loop is:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">:SWEET4_103<br />Wait 0 ms<br />if<br />&nbsp; Model.Available(#GREENWOO)<br />else_jump @SWEET4_103</code><br />As you can see, the code stays in this loop, until the model is available.<br /><br /><span style="color: red;" class="bbc_color"><strong>If-then-end structure</strong></span><br />There are other structures which you can use to check conditions. For example the if-then-end structure. For example:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">if $choice == 0<br />then<br />$money = 10<br />End</code><br />When the variable $choice equal is to 0, then the variable $money will become 10. If $choice isn&#039;t equal to 0, nothing will happen. You have to put an &quot;end&quot; to indicate where the code should continue when the condition is not true. You can add more things between &quot;then&quot; and &quot;end&quot; that will only be executed when the condition is true.<br /><br /><span style="color: red;" class="bbc_color"><strong>Repeat-wait-until structure</strong></span><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">repeat<br />&nbsp;wait 0 ms<br />until 03D0: wav 3 loaded</code><br />This is an example of a <strong>repeat-wait-until structure</strong>. This is a loop, so there has to be a wait in it. This code means: do everything between repeat and until, until the condition is true. Between repeat and until there can be also other things, that will be executed over and over again until the condition is true. Instead of using repeat-wait-until, you can also write it as a conditional jump (this will behave exactly the same!):<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">:label<br />wait 0 ms<br />if<br />03D0: wav 3 loaded<br />else_jump @label</code><br /><span style="color: red;" class="bbc_color"><strong>Numbers</strong></span><br />There are two kinds of numbers:<br /><strong>Integer values:</strong> 1 2 3<br /><strong>Floating-point values:</strong> 1.5345 3.4<br /><br />Floating-point values will be used as coordinates, angles or things like speed.<br /><br />Integer values are used for most other things. The advantage of Integer values, is that computer can easy calculate with these. These numbers are for example used for waiting periods.<br /><br />The Integer Values and Floating-Point values can&#039;t be mixed up, because then the code won&#039;t work.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">0004: $abc =&nbsp; 5000;; integer values<br />0084: $def = $abc;; integer values and handles</code><br />The difference is that the first a assigns a value to a global variable. In this case 5000 to global variable $abc. Then you say, that $def has to get the same value as $abc. So this code means: $def = $abc = 5000 (But you may not use this in the main.scm, there you have to split it up)<br /><br /><span style="color: red;" class="bbc_color"><strong>Variables</strong></span><br />There are two kinds of variables: global and local. Global variables are indicated with a $ (for example: $abc), local are indicated with a @ at the end (for example: 2@). Local variable-names only consists of numbers, a global variable has to consist of characters and digts. When a Global Variable only consists of numbers, it will be handles differently by the compiler. This can lead to unexpected results, so you shoudl make sure that your variablenambles contain at least one character. The difference between local and global variable is that you use a global through the whole script. A local variable is applies only within one thread. When you assign a value to 1@, and you want to use that number in another thread again, it won&#039;t be avaiable, you have to assign it that value again. The value of the other thread doesn&#039;t apply any more.<br /><br /><span style="color: red;" class="bbc_color"><strong>Calculate with variables</strong></span><br />Sometimes you have to calculate with variable. There are some opcodes for this. Caution: there are different opcodes for integer-values and floating-point-values, and there are different opcodes for global or local variables. You can add, subtract, multiply and divide. Some examples:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">0008: $variable += 1</code><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">000A: 3@ += 3000</code><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">000B: 6@ += 0.1</code><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">0009: $variable += 1.741</code><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">0058: $variable += $variable23 // (int)</code><br />Beware not to confuse these two opcodes:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">0038:&nbsp; &nbsp;$variable == 1</code><br />With this opcode, you will check if $672 is equal to 1.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">0004: $var = 0</code><br />With this opcode you will set the global variable $var to 1.
