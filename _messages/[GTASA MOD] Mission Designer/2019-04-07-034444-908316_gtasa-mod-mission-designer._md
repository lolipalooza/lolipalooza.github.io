---
thread: "[GTA:SA MOD] Mission Designer"
id_msg: 908316
date: "2019-04-07 03:44:44"

subject: "[GTA:SA MOD] Mission Designer"
user: "Mumifag Lalolanda"

modified_time: 2019-04-08 02:21:51
modified_name: "yap320sorgesoureDug"
icon: exclamation



edit_reason: "pos no'más y así :'v"
---
Ha llegado la hora de destronar al DYOM.<br />Ha llegado la hora de comenzar a planear lo que será el arma definitiva de la modificación del GTA.<br />Les presento el:<br /><br /><br /><div align="center"><span style="font-size: 24pt;" class="bbc_size"><span style="font-family: impact;" class="bbc_font"><span class="bbc_u"><span style="color: navy;" class="bbc_color">Mission Designer</span></span></span></span></div><br />¿En qué consiste? Pues simple: en toda una interfaz avanzada para crear tus propias misiones, actividades y storylines. La diferencia entre ésto (si es que logro hacerlo algun día) y el DYOM será avismal.<br /><br />Por cierto, no solo me gustaría crearlo para GTA:SA sino además para GTA IV/EFLC y V.<br /><br />Planeación:<br /><br />Contaremos con un menú bien hecho a base de draw texts y hasta con control de cursores, para simplificar y potenciar el manejo de la interface. Desde este menu podremos crear una misión, una actividad cualquiera, cutscenes con movimientos de cámaras, interfaces gráficas, y hasta un storyline. El límite será el cielo.<br /><br />Si es posible, hasta me gustaría que el mod permitiera al usuario generar un código SCM para que éste lo pueda compilar y toda la weá :x pero ésto último ya es pasarnos de soñadores, va a ser un auténtico desafío lograr sólo lo anterior.<br /><br />Solo nos queda una duda: ¿cómo construiremos el código base? ¿En SCM puro? ¿en MPACK? ¿en CLEO?<br />Veamos... SCM puro queda totalmente descartado. Lo que usaremos muy seguramente será una combinación de MPACK y CLEO. Tendremos muchos custom threads de CLEO activados desde el .scm del MPACK.<br /><br /><strong>EDIT:</strong> ahora que lo pienso, no hace falta el MPACK en lo absoluto. Lo haremos todo al 100% con CLEO, y despues de eso, ya quedará de parte del usuario si ponerlo en un scm vacío, o en el main.scm normal. En cualquier caso debería funcionar!<br /><br /><br /><span style="font-size: 14pt;" class="bbc_size"><strong><span style="font-family: arial;" class="bbc_font">Partes del <em>Mission Builder SA</em></span></strong></span>:<br /><br /><ul class="bbc_list"><li><span style="font-size: 12pt;" class="bbc_size"><strong>1. Misiones:</strong></span></li></ul><br />Las misiones son obviamente el plato principal de este mod.<br />En lo interno, las misiones activarán siempre el flag <span style="font-family: courier;" class="bbc_font"><span style="color: blue;" class="bbc_color">$ONMISSION</span></span>, para indicarle al engine que hay una misión en curso (y así evitar colisión con otras misiones).<br /><br /><div align="center"><span style="font-family: arial;" class="bbc_font"><span style="font-size: 12pt;" class="bbc_size"><strong>Acerca de la lógica de ejecución:</strong></span></span></div><br />Aún no me decido sobre si la estructura de ejecución debería hacerla como en DYOM (osea, por objetivos: ejecutar obj1, ejecutar obj2, ejecutar obj3, ...., ejecutar último objetivo, listo, ganaste la misión!), supongo que puedo hacerlo así, pero la novedad con mi <em>Mission Builder</em> debe ser que: 1. romperemos con la linealidad, 2. debemos permitir ciertos casos en los que se puedan ejecutar varios objetivos al mismo tiempo, es decir, si obj4 consiste en esperar a que el jugador llegue a un sphere, obj5 consiste en esperar a que el jugador tome un pickup, obj6 consiste en esperar a que el jugador aborde un vehículo, etc, entonces debe haber una funcionalidad que te permita correr todos estos objetivos al mismo tiempo.<br /><br />Podría hacer algo parecido a Heroes IV Map Editor/RPG Maker: crear una interfáz de códigos visual. O incluso, ¿Por qué no? Transformar todo en una lógica de OOP. No mamen, ya me estoy mareando mientras redacto ésto.<br /><br />Antes de parlotear acerca de la amplia lista de opciones que agregar para una misión, hablemos acerca de este posible OOP que pudieramos implementar:<br /><br />Veamos, con OOP hacemos referencia a toda esa lógica orientada a objetos y eventos, pero para hablar de eventos, mejor hablemos de clases:<br /><br />- clase 1: si creé un actor, entonces el actor es una instancia de la clase &quot;actor&quot;, no? por ende éste debe tener eventos asociados: si el actor muere, eso es un evento. Si el actor es apuntado con un arma o es agredido, esos serían otros eventos.<br /><br />- clase 2: el jugador es un tipo de actor muy particular, es una instancia de la clase &quot;jugador&quot; que no se puede instanciar más. Éste tendría sus propios eventos: jugador muere, etc.<br /><br />- clase 3: vehículos. Por lo tanto, los eventos serían: si el vehículo es destruido, si choca, etc.<br /><br />- clase 4: objetivo. El objetivo tendría eventos del tipo: si el objetivo está completo.<br /><br />- clase 5: timer/counter.<br /><br />Y por ahí iría la cosa. Ahora, pensemos en cómo podríamos construir una misión siguiendo esta lógica, a ver si realmente camina o me estoy empastelando:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">Misión:<br /><br />Misión.crear()<br />Subtítulos.mostrar(&quot;cadena de texto&quot;)<br />Cámara.fadear(duración)<br />Jugador.ponerEn(x,y,z,a)<br /><br />Actor.crear(tipo de actor,x,y,z,a,arma)<br />Actor.configurarComportamiento(sobre si odia al jugador o es su amigo)<br />Marker.crearSobre(actor)</code><br />Como que la lógica no funca mucho. Pero se me ocurrió otra weá más chistosa. ¿Y qué tal si dividir la ejecución en &quot;objetivos&quot;, mejor no lo hacemos en &quot;estados&quot;? Y de ese modo trabajamos con aquello en lo que tenemos más experiencia y práctica: en las maravillosas y sensacionales <em>Máquinas de Estados</em>.<br /><br />De ese modo la cosa quedaría así:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">Arrancar Misión:<br /><br />Estado 1:<br />Subtítulos.mostrar(&quot;cadena de texto&quot;)<br />Cámara.fadear(duración)<br />Jugador.ponerEn(x,y,z,a)<br />actor1: Actor.crear(tipo de actor,x,y,z,a,arma)<br />actor1.configurarComportamiento(sobre si odia al jugador o es su amigo)<br />Marker.crearSobre(actor)<br />Ir a estado 2<br /><br />Estado 2:<br />condicional: ¿ actor1.EstáMuerto() ?<br />si si -&gt; ir a estado 3<br />si no -&gt; DrawText.Mostrar(&quot;mata al actor 1&quot;) // nota, lo que pongas aqui se ejecutará permanentemente hasta que salgas del estado 2<br /><br />Estado 3:<br />Música.Reproducir(música de victoria!)<br />Jugador.RecibirDinero(cantidad)<br />Jugador.AumentarStat(respeto)<br />Subtítulos.mostrar(&quot;Misión pasada!~n~Respeto +~n~$12.000 +&quot;)<br /><br />Finalizar Misión.<br /></code><br />Más o menos así quedaía la cosa.<br />Pudieramos crear más máquinas de estado dentro de nuestra máquina de estados principal:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">Arrancar Misión:<br /><br />Estado 1:<br />máquina2: Máquina.Crear()<br />máquina3: Máquina.Crear()<br />ir a estado 2<br /><br />Estado 2:<br />¿ está el actor1 muerto y además está el vehículo1 en la ubicación x,y,z ?<br />si si -&gt;<br />&nbsp; &nbsp; &nbsp;quitar marker rojo sobre actor2<br />&nbsp; &nbsp; &nbsp;ir a estado 3<br /><br />Estado 3:<br />reproducir musiquita de victoria<br />mostrar subtítulo &quot;Pasaste la misión!&quot;<br />Finalizar Misión.<br /><br />máquina2 Estado 1:<br />crear actor1 (tipo de actor, x, y, z, angulo, arma)<br />actor1 será enemigo del jugador<br />crear marker rojo sobre actor1<br />crear subtítulos (lowp, &quot;~s~mata al actor1!&quot;)<br />ir a estado 2<br /><br />máquina2 Estado 2:<br />no hacer nada.<br /><br />máquina3 Estado 1:<br />crear vehículo1 (modelo, x, y, z, angulo, color1, color2)<br />crear marker azul sobre vehículo1<br />crear subtítulos (highp, &quot;~s~aborda el vehículo1!&quot;)<br />ir a estado 2<br /><br />máquina3 Estado 2:<br />¿ está el jugador dentro del vehículo1 ?<br />si si-&gt;<br />&nbsp; &nbsp; &nbsp;remover marker del vehículo1<br />&nbsp; &nbsp; &nbsp;crear checkpoint en las coordenadas x,y,z<br />&nbsp; &nbsp; &nbsp;crear subtítulos (lowp, &quot;~s~vé al sitio indicado en el radar!&quot;)<br />&nbsp; &nbsp; &nbsp;ir al estado 3<br /><br />máquina3 Estado 3:<br />¿ está el vehículo1 en las coordenadas x,y,z (dibujar linda esfera en ese sitio) ?<br />si si -&gt;<br />&nbsp; &nbsp; &nbsp;remover checkpoint<br />&nbsp; &nbsp; &nbsp;ir al estado 4<br /></code><br />El chiste aquí es que las máquinas 2 y 3 se estarán ejecutando al mismo tiempo, por lo que el juego no le exige al jugador completar los objetivos de matar al actor1 y llevar el vehículo1 a la ubicación deseada en orden, sino que puede comenzar haciendo el objetivo que desee.<br /><br />Es necesario simplificar y automatizar lo más posible el modo como se trabaja con los elementos (actor, vehículo y markers).<br />Ésto debe darle al usuario la posibilidad de hacer lo que desee, pero deberían venir muchas cosas puestas por default, por ejemplo, si creo un vehículo que el jugador debe tomar, entonces automatizar el crear un marker sobre el vehículo, y automatizar el remover el marker del vehículo cuando corresponda.<br /><br />O simplemente, aquí es cuando podrían ser útiles los eventos: si decidí crear un actor enemigo, entonces, al hacer doble click sobre ese actor, puedo ver sus eventos:<br />- actor1 eventos:<br />&nbsp; &nbsp; &nbsp;evento actor creado:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;convertir al actor en enemigo del jugador<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;darle un arma al actor<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;crear marker rojo sobre actor<br />&nbsp; &nbsp; &nbsp;evento actor muerto:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;quitar marker rojo sobre actor<br /><br />Otra cosa importante: hay que remover todo si finaliza la misión (indistintamente de si finalizó porque el juador la completó, o porque el jugador murió en el intento). Hay que destruir todos los markers y checkpoints creados, hay que remover referencias a actores, vehículos y objetos creados, etc.<br /><br /><br />Ufff, se supone que esto sería una síntesis corta, pero ya casi me está saliendo todo un manual de uso del <em>Mission Builder</em> aqui mismo...
