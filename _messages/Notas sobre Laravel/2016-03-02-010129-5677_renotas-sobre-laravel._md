---
thread: "Notas sobre Laravel"
id_msg: 5677
date: "2016-03-02 01:01:29"

subject: "Re:Notas sobre Laravel"
user: "yap320sorgesoureDug"

modified_time: 2016-03-02 14:53:14
modified_name: "yap320sorgesoureDug"
icon: xx



edit_reason: "pos nomas"
---
<span style="font-size: 14pt;" class="bbc_size"><strong>Búsquedas y Filtros con Laravel</strong></span><br /><br />Para agregar una búsqueda de usuarios en la página admin/users (index), vamos a bootstrap &gt; sección components &gt; NavBar y buscamos un campo que se asemeje al de un buscador, como éste:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot;&gt;<br />&nbsp; &lt;div class=&quot;form-group&quot;&gt;<br />&nbsp; &nbsp; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot;&gt;<br />&nbsp; &lt;/div&gt;<br />&nbsp; &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;<br />&lt;/form&gt;</code><br />Le hacemos los siguientes cambios para adaptarlo a nuestra construcción:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">{!! Form::open(&#91;&#039;route&#039; =&gt; &#039;admin.users.index&#039;, &#039;method&#039; =&gt; &#039;GET&#039;, &#039;class&#039; =&gt; &#039;navbar-form navbar-left pull-right&#039;, &#039;role&#039; =&gt; &#039;search&#039;]) !!}<br />&nbsp; &nbsp; &lt;div class=&quot;form-group&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; {!! Form::text(&#039;name&#039;, null, &#91;&#039;class&#039; =&gt; &#039;form-control&#039;, &#039;placeholder&#039; =&gt; &#039;Nombre de usuario&#039;]) !!}<br />&nbsp; &nbsp; &lt;/div&gt;<br />&nbsp; &nbsp; &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Buscar&lt;/button&gt;<br />{!! Form::close() !!}</code><br />Noten que en el formulario puro (primer código), en el campo input no hay nungún atributo name=&quot;name&quot;, mientras que en la clase <em>Form::text</em>, el valor del primer parámetro &quot;name&quot; se corresponde justamente con el atributo antes mencionado, y que dará por si sola la funcionalidad de retornar a la página index con los valores en la url <strong>?name=</strong><em>&lt;&lt;valor contenido anteriormente en el campo&gt;&gt;</em>.<br /><br />Pero ahora, aunque introduzcamos valores en el campo la página no hará nada, lo que falta para que funcione es agregar las funciones adecuadas en <em>UsersController@index</em>.<br /><br />Con <em>$request-&gt;get(&#039;name&#039;)</em> tenemos acceso al valor pasado mediante método GET en el valor &quot;name&quot;.<br />Lo que necesitamos dominar ahora es <a href="https://laravel.com/docs/5.2/eloquent#query-scopes" class="bbc_link new_win" target="_blank">Query Scopes</a>.<br /><br />Para construir una búsqueda utilizando el método de scopes, lo hacemos en las clases tipo <strong>Model</strong>, que funcionarán de un modo parecido a lo que hacíamos para construir parámetros personalizados a traves de <em>getAsdfAttribute()</em> o <em>setAsdfAttribute()</em> para obtener <em>$user-&gt;asdf</em>. Prestad atención kabrones ijoputas:<br /><br />En el modelo <em>User</em>:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">public function scopeName($query, $name)<br />{<br />&nbsp; &nbsp; $query-&gt;where(&#039;name&#039;, $name);<br />}</code><br />Y luego, desde el controlador, se llama al scope así:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$users = User::name($request-&gt;get(&#039;name&#039;))-&gt;get();&nbsp; &nbsp; // -&gt;first();&nbsp; &nbsp; // -&gt;paginate();</code><br />Noten como <em>User::name()</em> coincide con <em>scopeName()</em> en el mismo modo como <em>$user-&gt;asdf</em> coincide con <em>getAsdfAttribute</em>. Es decir, si pongo en el nombre del scope algo como <em>scopeAsdf</em>, entonces el nombre con el que llamo al scope sería <em>User::asdf()</em> (indistintamente de si el parámetro que me interesa se llame &quot;asdf&quot; o no.<br /><br /><strong>Nota:</strong> fíjense como en este caso me interesa que la consulta que se haga resulte de la comparación del parámetro que paso mediante GET y una columna alojada en mi base de datos (&quot;name&quot;). También podría querer obtener, por ejemplo, todos los datos de una tabla en los que el valor numérico de una columna que sean mayores a un número particular, tal es el caso de un ejemplo que ponen en la documentación oficial:<br /><br /><div class="codeheader">Código: (Model) <a href="#" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">public function scopePopular($query)<br />{<br />&nbsp; &nbsp; return $query-&gt;where(&#039;votes&#039;, &#039;&gt;&#039;, 100);<br />}</code><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$users = User::popular()-&gt;get;</code><br />E incluso podemos concatenar condiciones de búsqueda:<br /><div class="codeheader">Código: (Model) <a href="#" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">public function scopeActive($query)<br />{<br />&nbsp; &nbsp; return $query-&gt;where(&#039;active&#039;, 1);<br />}</code><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$users = App\User::popular()-&gt;active()-&gt;orderBy(&#039;created_at&#039;)-&gt;get();</code><br />También, hay que notar que, si queremos que la búsqueda coincida con el dato introducido, se hace ésto:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$query-&gt;where(&#039;my-column&#039;, $input_data);</code>Lo cual es lo mismo que escribir:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$query-&gt;where(&#039;my-column&#039;, &#039;=&#039;, $input_data);</code>Si omiten el <em>&#039;=&#039;</em>, entonces la función <em>where()</em> toma por defecto la comparación <em>&#039;=&#039;</em>, pero si desean otro tipo de comparación (ejemplo &#039;&gt;&#039; o &#039;&lt;&#039;), entonces hay que escribirlo explícitamente.<br /><br /><strong>Duda:</strong> ¿por qué la documentación oficial de Laravel expresa que hay que retornar el $query, pero en los videos tutoriales no se hace <em>return</em> y aún así funciona? Sepa su PTM...<br /><br /><strong>¿Cómo hacer más inteligentes las búsquedas?</strong><br /><br />Así tal y como está planteado el método <em>scopeName</em>, la única manera en la que encuentre resultados es que escribas lo que deseas encontrar tal y como está registrado (sin necesariamente tener que coincidir mayúsculas y minísculas). Así que para poder realizar una búsqueda más flexible, agregamos lo siguiente:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$query-&gt;where(&#039;name&#039;, &quot;LIKE&quot;, &quot;%$name%&quot;)</code><br />El <a href="https://styde.net/busquedas-y-filtros-con-laravel-y-eloquent-query-scopes/" class="bbc_link new_win" target="_blank">video</a> a partir del cual estamos elaborando estas notas no usa una columna &quot;name&quot; para almacenar el nombre del usuario, sino dos columnas: &quot;first_name&quot; y &quot;last_name&quot;, por lo que además, necesita flexibilizar aún más la búsqueda para comparar entre nombres y apellidos el dato introducido en el campo:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$query-&gt;where(\DB::raw(&quot;CONCAT(first_name, &#039; &#039;, last_name)&quot;), &quot;LIKE&quot;, &quot;%name%&quot;)</code><br />Pero al hacer ésto se complica mucho el código y además podría perder compatibilidad con otros lenguajes distintos a sql, o mysql. El video explica que eso se puede solucionar simplemente añadiendo una columna nueva en la base de datos &quot;full_name&quot; que combine &quot;first_name&quot; y &quot;last_name&quot; (habría que modificar las migraciones y los seeders), o existen otros métodos. La idea es que el código quede así:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$query-&gt;where(&#039;full_name&#039;, &quot;LIKE&quot;, &quot;%name%&quot;)</code><br />Al final, el código que nos interesa, resultaría así:<br /><br /><div class="codeheader">Código: (Model) <a href="#" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">public function scopeName($query, $name)<br />{<br />&nbsp; &nbsp; if (trim($name) != &quot;&quot;)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; $query-&gt;where(&#039;name&#039;, &quot;LIKE&quot;, &quot;%$name%&quot;);<br />&nbsp; &nbsp; }<br />}<br /></code><div class="codeheader">Código: (Controller) <a href="#" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">public function index(\Illuminate\Http\Request $request)<br />{<br />&nbsp; &nbsp; $users = User::name($request-&gt;get(&#039;name&#039;))-&gt;orderBy(&#039;id&#039;, &#039;DESC&#039;)-&gt;paginate();<br /><br />&nbsp; &nbsp; return view(&#039;admin.users.index&#039;, compact(&#039;users&#039;));<br />}</code><strong>Nota:</strong> La función <em>trim()</em> elimina el exceso de espacios en el dato introducido en el campo.<br /><br /><strong>Generalidades: ¿Cuándo usar el método GET y cuando usar el método POST?</strong><br /><br />Los <a href="https://styde.net/busquedas-y-filtros-con-laravel-y-eloquent-query-scopes/" class="bbc_link new_win" target="_blank">videotutoriales </a>de Duilio.me (muy malos por cierto jeje) explican que el método POST se usa cuando quieres insertar/modificar/eliminar datos en una página web (a través de su base de datos) y GET se usa cuando únicamente quieres leer. Así de simple (?).
