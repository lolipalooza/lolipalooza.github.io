---
thread: "Notas sobre Laravel"
id_msg: 5674
date: "2016-02-29 16:06:59"

subject: "Re:Notas sobre Laravel"
user: "yap320sorgesoureDug"

modified_time: 2016-02-29 16:21:17
modified_name: "yap320sorgesoureDug"
icon: xx



edit_reason: "pos nomas"
---
<strong><span style="font-size: 14pt;" class="bbc_size">Principio de diseño DRY (Don&#039;t repeat yourself)</span></strong><br /><br />Creo que el video donde te enseñan ésto se refieren a algo aún más general con eso de &quot;DRY&quot;, pero el código que enseñan es enfocado a algo más particular, inspirado del framework de <em>Ruby on Rails</em>, y consta en lo siguiente:<br /><br />Para el controlador <em>UsersController</em>, que tiene los métodos <em>index()</em>, <em>create()</em>, <em>store()</em>, <em>edit()</em>, <em>update()</em> y <em>destroy()</em> (también hay un método <em>show()</em> que nunca trabajamos (TODO: hacer algo con él)), se puede crear en un constructor un proceso que es reutilizado en algunos de sus métodos:<br /><br />Originalmente se tiene lo siguiente:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">...<br /><br />class UsersController extends Controller<br />{<br />&nbsp; &nbsp; public function index()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function create()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function store()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function show($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function edit($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; $user = User::findOrFail($id);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; return view(&#039;admin.users.edit&#039;, compact(&#039;user&#039;));<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function update($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; $user = User::findOrFail($id);<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function destroy($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; $user = User::findOrFail($id);<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br />}</code><br />Nótese como la instrucción <em>$user = User::findOrFail($id)</em> se repite en 3 de los métodos del controlador. Entonces se puede hacer lo siguiente para evitar repetir dichas líneas de código en cada método:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">...<br />use Illuminate\Routing\Route;<br /><br />class UsersController extends Controller<br />{<br />&nbsp; &nbsp; public function __construct()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;beforeFilter(&#039;@findUser&#039;, &#91;&#039;only&#039; =&gt; &#91;&#039;show&#039;, &#039;edit&#039;, &#039;update&#039;, &#039;destroy&#039;]]);<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function findUser(Route $route)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;user = User::findOrFail($route-&gt;getParameter(&#039;users&#039;));<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function index()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function create()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function store()<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function show($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function edit($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; return view(&#039;admin.users.edit&#039;)-&gt;with(&#039;user&#039;, $this-&gt;user);<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function update($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; public function destroy($id)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; }<br />}</code><br />Y ya no resulta necesario utilizar la instrucción <em>$user = User::findOrFail($id)</em> en cada uno de los métodos que antes la utilizaban.<br /><br />Observaciones necesarias:<br /><ul class="bbc_list"><li>Antes de aplicar esta solución, los métodos llamaban a <em>$user = User::findOrFail($id)</em>, que guarda su valor de retorno en la variable <em>$user</em>, pero ésto ya no es así, sino que con el constructor y el método <em>findUser()</em> ha sido creada una nueva variable para la clase <em>$this-&gt;user</em>, de modo que hay que reemplazar la variable <em>$user</em> por <em>$this-&gt;user</em> en todos los métodos de la clase que trabajen con <em>findUser()</em>.</li><li>Para poder utilizar la variable <em>$route</em> del tipo <em>Route</em> como entrada para el método <em>findUser()</em>, no hay que olvidar incluir la clase <em>Illuminate/Routing/Route</em> en el código.</li><li>Todos los métodos que utilizarán el <em>findUser()</em> comparten algo en común: necesitan recibir de entrada una variable <em>$id</em> que es la ID del usuario, incluido el método <em>show()</em> que hasta ahora no habíamos usado.</li><li>El caso particular del método <em>edit()</em> muestra cómo hay que reemplazar la forma de pasar la variable a la vista. antes era con un <em>compact(&#039;&#039;)</em> y ahora es con un <em>view(&#039;vista&#039;)-&gt;with(&#039;variable&#039;, $this-&gt;myVar)</em>.</li></ul><br /><strong>¿Cómo obtener el nombre del usuario en lugar del Id?</strong><br /><br />Ahora que gracias a la filosofía DRY hemos modificado el código para obtener desde un solo lugar el <em>Id </em>del usuario, mediante la línea:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$this-&gt;user = User::findOrFail($route-&gt;getParameter(&#039;users&#039;));&nbsp; &nbsp; // recordad que $route-&gt;getParameter(&#039;users&#039;) retorna el Id, porque lo está leyendo desde la url: mipagina.com/admin/users/{users}/edit</code><br />Si deseamos obtener no el Id sino el nombre del usuario (por ejemplo) aunque supongo que podríamos aplicar lo mismo si deseáramos obtener otro parámetro, entonces lo hacemos del siguiente modo:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">$this-&gt;user = User::where(&#039;username&#039;, $route-&gt;getParameter(&#039;users&#039;))-&gt;firstOrFail();</code>TODO: probar ésto.
