---
thread: "Notas sobre Laravel"
id_msg: 5669
date: "2016-02-24 20:31:50"

subject: "Re:Notas sobre Laravel"
user: "yap320sorgesoureDug"

modified_time: 2016-02-24 20:36:20
modified_name: "yap320sorgesoureDug"
icon: xx



edit_reason: "pos nomas"
---
<strong><span style="font-size: 14pt;" class="bbc_size">Modelo y Controlador de Usuarios</span></strong><br /><br />Para hablar de este tema, debemos tener en cuenta que estamos hablando de un controlador que se encuentra dentro de una ruta llamada &quot;admin&quot;, y pone a disposición una interfaz que permite revisar una lista con todos los usuarios que se encuentran registrados en el sistema, así como también permite otras actividades tales como: crear un nuevo usuario, editar un usuario ya existente, o incluso borrarlo.<br /><br />Tenemos el modelo User, que define los datos de los que está compuesto un usuario, y el controlador UsersController, que contiene los siguientes métodos:<br /><br /><ul class="bbc_list"><li>index (que devuelve la vista al html de la página que contiene la lista de usuarios)</li><li>create (que devuelve la vista a una página que contiene un formulario, dicho formulario tiene como acción redirigir a la ruta &quot;store&quot;, que llamará al método &quot;store&quot;, pasándole como dato mediante método POST la información contenida en el formulario)</li><li>store (que procesará la información recibida, y redirigirá la vista hacia &quot;index&quot;)</li><li>edit (que recibe como dato una &quot;id&quot; de usuario, y, asegurándose de que existe un usuario con dicha &quot;id&quot;, retornará la vista hacia una página con un nuevo formulario). El método edit() le pasa a esa vista el dato de usuario para que ésta pueda cargar dichos datos al formulario. El dato es transferido mediante el método &quot;compact()&quot;. Este formulario llamará al método update, pero le pasará el dato del usuario por un método distinto de &quot;POST&quot;</li><li>update (que procesará dicho dato, asegurándose antes de que el usuario con la &quot;id&quot; proporcionada existe, y actualizará la base de datos, retornando la vista hacia la última página cargada, es decir, el formulario de edición)</li><li>destroy (se hablará de ella más adelante)</li></ul><br /><strong>Proceso de edición de usuarios</strong><br /><br />A groso modo, lo que se necesita para implementar la edición de usuarios es lo siguiente:<br /><br /><ul class="bbc_list"><li>Primero que nada, hay que agregar un enlace en alguna parte del index que llame a la función <em>edit</em>, como por ejemplo, en la tabla de usuarios, como opción para cada usuario. El enlace sería:<br /><em>&lt;a href=&quot;{!! <strong>route(&#039;admin.users.edit&#039;, $user)</strong> !!}&quot;&gt;&lt;/a&gt;</em><br />Nótese como se le pasa el parámetro <em>$user</em> al método route(), parámetro que es distinto para cada usuario porque está contenido dentro de un <em>foreach($users as $user)</em>.</li></ul><br /><ul class="bbc_list"><li>En el método edit() agregar el código:<br /></li></ul><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&nbsp;&nbsp;&nbsp;public function edit($id)<br />&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$user = User::findOrFail($id);&nbsp; &nbsp; &nbsp;// verifica que el usuario existe<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return view(&#039;admin.users.edit&#039;, compact(&#039;user&#039;));&nbsp; &nbsp; &nbsp;// devuelve la vista con el formulario, le pasa el valor de $user<br />&nbsp;&nbsp;&nbsp;}<br /></code><br /><ul class="bbc_list"><li>Crear la vista que contiene el formulario. El formulario será creado mediante:<br />Form::model($user, &#91;&#039;route&#039; =&gt; &#91;&#039;admin.users.update&#039;, $user], &#039;method&#039; =&gt; &#039;PUT&#039;])<br />Nótese que &#039;route&#039; vendría equivaliendo a la propiedad &quot;action&quot;, pero en esta ocasión (a diferencia del proceso de creación de usuarios) el valor no es simplemente una ruta, contiene además la variable $user. Ahora, ¿Por qué el método es PUT y no POST? Porque así están predefinidas las rutas para el controlador. Ejecutar en cónsola: <em>php artisan route:list</em>, para observar todas las rutas de la página, y los métodos que usa cada una.<br /></li></ul><br /><ul class="bbc_list"><li>En el método update() agregar lo siguiente:</li></ul><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&nbsp;&nbsp;&nbsp;public function update($id)<br />&nbsp;&nbsp;&nbsp;{<br />&nbsp; &nbsp; &nbsp; &nbsp; $user = User::findOrFail($id);&nbsp; &nbsp; // asegurar que el usuario existe<br />&nbsp; &nbsp; &nbsp; &nbsp; $user-&gt;fill(Request::all());<br />&nbsp; &nbsp; &nbsp; &nbsp; $user-&gt;save();&nbsp; &nbsp; &nbsp; // salvar<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; return \Redirect::back();&nbsp; &nbsp; // redirigir a atrás<br />&nbsp;&nbsp;&nbsp;}<br /></code><br /><ul class="bbc_list"><li>Tener cuidado con el parámetro de la contraseña. No se desea que la contraseña sea cambiada a algo en blanco si es dejada como blanco en el formulario. Para ello, en el modelo <em>User</em>, en el método <em>setPasswordAttribute</em>, se debe ignorar lo de encriptar la contraseña (o tomar alguna acción) si el valor que recibe es vacío.</li></ul>
