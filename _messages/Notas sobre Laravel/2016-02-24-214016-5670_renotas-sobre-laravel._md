---
thread: "Notas sobre Laravel"
id_msg: 5670
date: "2016-02-24 21:40:16"

subject: "Re:Notas sobre Laravel"
user: "yap320sorgesoureDug"

modified_time: 2016-02-25 15:35:49
modified_name: "yap320sorgesoureDug"
icon: xx



edit_reason: "pos nomas"
---
<strong><span style="font-size: 14pt;" class="bbc_size">Validación de datos</span></strong><br /><br />Para validar los datos que hemos recibido mediante formulario (ya sea desde crear nuevo usuario como desde editarlo, pero el ejemplo lo pondremos en el método store()):<br /><br /><strong>Método 1: utilización de Facades de Laravel</strong><br /><br />El Facade (o &quot;fasap&quot;) de Laravel \Validator contiene bastantes métodos para poder realizar validaciones, a continuación se muestra cómo se ha empleado:<br /><br /><em>/app/Http/Controllers/Admin/<strong>UsersController.php</strong></em>:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&nbsp;&nbsp;&nbsp;public function store()<br />&nbsp;&nbsp;&nbsp;{<br />&nbsp; &nbsp; &nbsp; &nbsp; $data = Request::all();<br />&nbsp; &nbsp; &nbsp; &nbsp; $rules = array(<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;name&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;email&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;password&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;type&#039; =&gt; &#039;required&#039;<br />&nbsp; &nbsp; &nbsp; &nbsp; );<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; $v = \Validator::make($data, $rules);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; if ($v-&gt;fails())<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return redirect()-&gt;back()<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;withErrors($v-&gt;errors())<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;withInput(Request::except(&#039;password&#039;));<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$user = User::create($data);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return \Redirect::route(&#039;admin.users.index&#039;);<br />&nbsp;&nbsp;&nbsp;}<br /></code><br />Comentarios:<br />Fíjense como en el condicional if <em>($v-&gt;fails())</em>, donde se llama a <em>return redirect()</em>, se devuelve a una vista pero se le pasa un parámetro llamado $errors.<br />En las vistas siempre existe dicho parámetro, solo que por defecto siempre está vacío, o en FALSE.<br /><br />Hay que agregar en la vista la siguiente comprobación:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">@if($errors-&gt;any())<br />&nbsp; &nbsp; &lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;Por favor corrige los errores:&lt;/p&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;ul&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @foreach($errors-&gt;all() as $error)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;li&gt;{{ $error }}&lt;/li&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @endforeach<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;/ul&gt;<br />&nbsp; &nbsp; &lt;/div&gt;<br />@endif</code><br /><strong>Método 2: mediante los métodos que vienen incluidos en el controlador.</strong><br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&nbsp;&nbsp;&nbsp;public function store(Request $request)<br />&nbsp;&nbsp;&nbsp;{<br />&nbsp; &nbsp; &nbsp; &nbsp; $rules = array(<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;name&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;email&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;password&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;type&#039; =&gt; &#039;required&#039;<br />&nbsp; &nbsp; &nbsp; &nbsp; );<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;validate($request, $rules);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$user = User::create($request-&gt;all());<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return \Redirect::route(&#039;admin.users.index&#039;);<br />&nbsp;&nbsp;&nbsp;}<br /></code><br />Con este método ya no son necesarias las líneas de devolver vista con errores y toda la cosa, ya que todo eso se hace en el submétodo -&gt;validate() del controlador.<br /><br /><strong>Método 3: mediante un Form Request Validator</strong><br /><br />Desde cónsola creamos una nueva clase tipo Request:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">php artisan make:request nombre</code><br />En esta clase, copiamos las reglas antes definidas:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">public function rules()<br />{<br />&nbsp; &nbsp; return [<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;name&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;email&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;password&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#039;type&#039; =&gt; &#039;required&#039;,<br />&nbsp; &nbsp; ];<br />}<br /></code><br />En la clase hay un método authorize(), que de momentos hay que dejar que devuelva un TRUE para que cualquier usuario pueda crear usuarios, pero luego se definirán las condiciones para que solo grupos de usuarios con provilegios administrativos puedan hacerlo.<br /><br />Y en UsersController quedaría como:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">use App\Http\Requests\CreateUserRequests;<br /><br />...<br /><br />&nbsp;&nbsp;&nbsp;public function store(CreateUserRequest $request)<br />&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$user = User::create($request-&gt;all());<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return \Redirect::route(&#039;admin.users.index&#039;);<br />&nbsp;&nbsp;&nbsp;}<br /></code><br />Ya no haría falta ninguna comprobación de validación, ya que todo se realiza de forma automática mediante la clase <em>CreateUserRequest</em>.<br />Nótese que si mediante este método la validación falla, no seran ejecutadas las lineas de código que hay dentro del método store().<br /><br />Para entrar en mayor profundidad acerca de las reglas de validación, pues consultar con la documentaión de Laravel:<br /><a href="https://laravel.com/docs/5.2/validation" class="bbc_link new_win" target="_blank">https://laravel.com/docs/5.2/validation</a><br /><br />Algunos ejemplos concretos de reglas de validación:<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;required&#039;</code>Se usa si quieres obligar al usuario a rellenar al campo, a no admitir valores vacíos.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;unique&#039;</code>Si quieres que cada valor que tome el parámetro sea único, que no se repitan valores (ejemplo, correos).<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;required|unique&#039;</code>Se puede concatenar dos reglas con el símbolo barra horizontal: |<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;required|unique:users,email&#039;</code>Si deseas agregar la tabla y la columna donde quieres que revise para asegurarse de que no hay valores repetidos, en este caso, revisar en tabla &quot;users&quot;, columna &quot;email&quot;.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;required|unique:users,email,8&#039;</code>Si además de las reglas descritas anteriormente, se desea que ignore revisar las reglas en una id particular, es decir, si la id es 8, entonces el usuario 8 es el único que puede tener el mismo email que estoy ingresando.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;required|unique:users,email,&#039; . $this-&gt;route-&gt;getParameter(&#039;users&#039;)</code>En este caso, estoy accediendo al id de forma dinámica. La clase en la que me encuentro, que es del tipo Request, debe disponer de un constructor con la siguiente estructura:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">private $route;<br /><br />public function __construct(Route $route)<br />{<br />&nbsp; &nbsp; $this-&gt;route = $route;<br />}</code><br />Cada vez que se instancia un objeto de esta clase, es recibida una ruta que contiene un usuario, así que por lo tanto existe el valor <em>$this-&gt;route-&gt;getParameter(&#039;users&#039;)</em>. Ahora, ¿Cómo sabe uno que el parámetro donde se encuentra la ID se llama &#039;users&#039;? Si escribes en cónsola el siguiente comando:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">php artisan route:list</code>Vas a tener acceso a todas las rutas que conforman tu página, construidas mediante el framework de Laravel, y ahí puedes fijarte que la ruta posee un parámetro llamado {users}, que cuando la ves decodificada en un navegador, se lee como un número, el número que representa a la ID del usuario.<br /><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">|&nbsp; &nbsp; &nbsp; &nbsp; | GET|HEAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| admin/users/{users}/edit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | admin.users.edit&nbsp; &nbsp; | App\Http\Controllers\Admin\UsersController@edit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br /></code><br />A la hora de editar el usuario, se obtiene esta ruta:<br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">http://curso.basico/admin/users/1/edit</code><br /><div class="codeheader">Código: <a href="javascript:void(0);" onclick="return smfSelectText(this);" class="codeoperation">[Seleccionar]</a></div><code class="bbc_code">&#039;mi_parámetro&#039; =&gt; &#039;in:valor1,valor2&#039;</code>De esta forma se define la regla de que solo admito 2 posibles valores para un parámetro.
